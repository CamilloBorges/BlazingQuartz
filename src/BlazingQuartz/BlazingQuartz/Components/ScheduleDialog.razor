@using BlazingQuartz.Core.Models

<MudDialog>
    <DialogContent>
        <MudButtonGroup OverrideStyles="false" Class="pb-4">
            <MudButton Color="Color.Default" Size="Size.Large" DisableElevation="true"
                    Variant="@(_selectedIndex == TAB_JOB ? Variant.Filled : Variant.Text)"
                    OnClick="() => OnSelectedTabChanged(TAB_JOB)">Job Details</MudButton>
            <MudButton Color="Color.Default" Size="Size.Large" DisableElevation="true"
                    Variant="@(_selectedIndex == TAB_TRIGGER ? Variant.Filled : Variant.Text)"
                    OnClick="() => OnSelectedTabChanged(TAB_TRIGGER)">Trigger Details</MudButton>
        </MudButtonGroup>

        @if (_selectedIndex == TAB_JOB)
        {
            <BlazingJob @ref="_jobPanel" JobDetail="JobDetail" @bind-IsValid="_jobDetailIsValid" />
        }
        else
        {
            <BlazingTrigger @ref="_triggerPanel" TriggerDetail="TriggerDetail" @bind-IsValid="_triggerDetailIsValid" />
        }
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-space-between flex-grow-1 pa-3">
            <MudButton OnClick="OnCancel" Variant="Variant.Filled"
                Style="width: 100px;">Cancel</MudButton>
            <div class="d-flex gap-4">
                <MudButton @ref="_backBtn" 
                    Style="width: 100px;"
                    Disabled="@(_selectedIndex == TAB_JOB)"
                    Color="Color.Secondary" 
                    StartIcon="@Icons.Filled.NavigateBefore"
                    Variant="Variant.Filled"
                    OnClick="OnBack">Back</MudButton>
                <MudButton Color="Color.Primary" 
                    Style="width: 100px;"
                    OnClick="OnSubmit"
                    EndIcon="@_nextIcon"
                    Variant="Variant.Filled">@_nextText</MudButton>
            </div>
        </div>
        
        
    </DialogActions>
</MudDialog>
@code {
    const int TAB_JOB = 0;
    const int TAB_TRIGGER = 1;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter]
    public JobDetailModel JobDetail { get; set; } = new();
    [Parameter]
    public TriggerDetailModel TriggerDetail { get; set; } = new();

    private bool _jobDetailIsValid;
    private bool _triggerDetailIsValid;

    private int _selectedIndex = TAB_JOB;
    private MudButton _backBtn = null!;
    private string _nextText = "Next";
    private string? _nextIcon = Icons.Filled.NavigateNext;

    private BlazingJob _jobPanel = null!;
    private BlazingTrigger _triggerPanel = null!;

    private async Task OnSelectedTabChanged(int index)
    {
        if (_selectedIndex == index)
            return;

        // validate before change tab
        if (_selectedIndex == TAB_JOB)
        {
            await _jobPanel.Validate();
            if (!_jobDetailIsValid)
                return;
        }

        _selectedIndex = index;

        // update text
        if (_selectedIndex == TAB_JOB)
        {
            _nextText = "Next";
            _nextIcon = Icons.Filled.NavigateNext;
        }
        else if (_selectedIndex == TAB_TRIGGER)
        {
            _nextText = "Save";
            _nextIcon = null;
        }
    }

    async Task OnBack()
    {
        await OnSelectedTabChanged(TAB_JOB);
    }

    async Task OnSubmit()
    {
        if (_selectedIndex == TAB_JOB)
        {
            await OnSelectedTabChanged(TAB_TRIGGER);
            return;
        }

        await _triggerPanel.Validate();

        if (!_jobDetailIsValid || !_triggerDetailIsValid)
        {
            return;
        }

        MudDialog.Close(DialogResult.Ok((JobDetail, TriggerDetail)));
    }

    void OnCancel() => MudDialog.Cancel();
}

