@using BlazingQuartz.Core.Models
@page "/schedules"

<PageTitle>Schedules</PageTitle>

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h4">Schedules</MudText>
    <MudGrid>
        <MudItem xs="6" Class="mb-2 d-flex gap-3 justify-start align-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Filled.Add"
                       OnClick="OnNewSchedule">New</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error"
                       StartIcon="@Icons.Filled.Delete"
                       OnClick="OnDeleteSelectedScheduleJobs">Delete</MudButton>
        </MudItem>
        <MudItem xs="6" Class="mb-2 d-flex justify-end align-center">
            <MudTextField @bind-Value="SearchJobKeyword" Placeholder="Search" Adornment="Adornment.Start"
                          Class="flex-grow-0"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
        </MudItem>
    </MudGrid>
    <MudDataGrid 
        @ref="_scheduleDataGrid"
        MultiSelection="true" Items="@ScheduledJobs" Filterable="false"
        ShowColumnOptions="false" SortMode="SortMode.None"
        RowStyleFunc="@_scheduleRowStyleFunc"
        Hideable="true" Groupable="true" GroupExpanded="true">
        <Columns>
            <SelectColumn T="ScheduleModel" ShowInFooter="false" />
            <Column T="ScheduleModel" Field="JobGroup" Title="Job Group"
                Grouping="true" Hidden="true" ShowColumnOptions="false" GroupBy="@_groupDefinition">
                <GroupTemplate>
                    <span style="font-weight:bold">Job Group: @context.Grouping.Key 
                    <MudChip Size="Size.Small" Variant="Variant.Outlined">Total: @context.Grouping.Count()</MudChip>
                    </span>
                </GroupTemplate>
            </Column>
            <Column T="ScheduleModel" Title="Status" Filterable="false" Groupable="false" 
                Sortable="false"
                ShowColumnOptions="false"
                HeaderStyle="text-align: center;width: 40px;"
                CellStyle="text-align: center;">
                <CellTemplate>
                    @switch (context.Item.JobStatus)
                    {
                        case JobStatus.Running:
                            <MudProgressCircular Color="Color.Primary" Size="Size.Small"
                                                 Style="vertical-align: middle;"
                                                 title="Running"
                                                 Indeterminate="true" />
                            break;
                        case JobStatus.Idle:
                            <MudIcon Icon="@Icons.Filled.Circle" Class="green-text"
                                     Style="vertical-align: middle;"
                                     Title="Idle"
                                     Size="Size.Medium" />
                            break;
                        case JobStatus.Paused:
                            <MudIcon Icon="@Icons.Filled.Circle" Class="grey-text"
                                     Style="vertical-align: middle;"
                                     Title="Paused"
                                     Size="Size.Medium" />
                            break;
                        case JobStatus.NoSchedule:
                            <MudIcon Icon="@Icons.Filled.AutoDelete" Class="grey-text"
                                     Style="vertical-align: middle;"
                                     Title="Schedule completed and job got deleted"
                                     Size="Size.Small" />
                            break;
                        case JobStatus.Error:
                                <MudTooltip>
                                    <ChildContent>
                                        <MudIcon Icon="@Icons.Outlined.ErrorOutline" Size="Size.Small"
                                                 Style="vertical-align: middle;"
                                                 Color="@Color.Error" />
                                    </ChildContent>
                                    <TooltipContent>
                                        <div style="max-width: 220px; overflow-wrap: break-word;">
                                            @if (!string.IsNullOrEmpty(context.Item.ExceptionMessage))
                                            {
                                                @("Job has error. " + context.Item.ExceptionMessage)
                                            }
                                            else
                                            {
                                                @("Job has error.")
                                            }
                                        </div>
                                    </TooltipContent>

                                </MudTooltip>
                            break;
                        case JobStatus.NoTrigger:
                            <MudIcon Icon="@Icons.Filled.AlarmOff" Class="grey-text"
                                     Style="vertical-align: middle;"
                                     Title="No trigger"
                                     Size="Size.Small" />
                            break;
                        default:
                            break;
                    }
                </CellTemplate>
            </Column>
            <Column T="ScheduleModel" Field="JobName" Title="Job Name" ShowColumnOptions="false">
                <CellTemplate>
                    <MudTooltip Duration="1000" Text="@context.Item.JobDescription">
                        @context.Item.JobName
                    </MudTooltip>
                </CellTemplate>
            </Column>
            <Column T="ScheduleModel" Field="TriggerName" Title="Trigger" ShowColumnOptions="false">
                <CellTemplate>
                    @if (context.Item.JobStatus == JobStatus.NoTrigger)
                    {
                        <MudText Typo="Typo.body1">--</MudText>
                    }
                    else
                    {
                        <MudTooltip Duration="1000" Text="@context.Item.TriggerDescription">
                            @context.Item.TriggerName
                        </MudTooltip>
                    }
                </CellTemplate>
            </Column>
            <Column T="ScheduleModel" Field="TriggerType" Title="Schedule">
                <CellTemplate>
                    @if (context.Item.JobStatus == JobStatus.NoTrigger)
                    {
                        <MudText Typo="Typo.body1">--</MudText>
                    }
                    else
                    {
                        @if (context.Item.TriggerDetail == null)
                        {
                            <div class="d-flex align-center">
                                <MudIcon Icon="@context.Item.TriggerType.GetTriggerTypeIcon()"
                                        Title="@(context.Item.TriggerType.ToString())" Size="Size.Small"
                                        Class="mr-1" />
                                @(context.Item.TriggerType == TriggerType.Unknown ? 
                                    (context.Item.TriggerTypeClassName == null ? 
                                        TriggerType.Unknown.ToString() : 
                                        context.Item.TriggerTypeClassName) : 
                                    context.Item.TriggerType)
                            </div>
                        }
                        else
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@context.Item.TriggerType.GetTriggerTypeIcon()"
                                                Title="@(context.Item.TriggerType.ToString())" Size="Size.Small"
                                                Class="mr-1" />
                                        @(context.Item.TriggerType == TriggerType.Unknown ? 
                                            (context.Item.TriggerTypeClassName == null ? 
                                                TriggerType.Unknown.ToString() : 
                                                context.Item.TriggerTypeClassName) : 
                                            context.Item.TriggerType)
                                    </div>
                                </ChildContent>
                                <TooltipContent>
                                    <div style="max-width: 220px; overflow-wrap: break-word;">@(context.Item.TriggerDetail?.ToSummaryString())</div>
                                </TooltipContent>
                            </MudTooltip>
                        }
                    }
                </CellTemplate>
            </Column>
            <Column T="ScheduleModel" Field="JobType" Title="Job Type" />
            <Column T="ScheduleModel" Title="Next Run" Groupable="false" Filterable="false" ShowColumnOptions="false">
                <CellTemplate>
                    @if (context.Item.JobStatus == JobStatus.NoTrigger)
                    {
                        <MudText Typo="Typo.body1">--</MudText>
                    }
                    else
                    {
                        @context.Item.NextTriggerTime?.LocalDateTime
                    }
                </CellTemplate>
            </Column>
            <Column T="ScheduleModel" Title="Last Run" Groupable="false" Filterable="false" ShowColumnOptions="false">
                <CellTemplate>
                    <div class="d-flex gap-1">
                        @if (!string.IsNullOrEmpty(context.Item.ExceptionMessage)
                                && context.Item.JobStatus != JobStatus.Error)
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <MudIcon Icon="@Icons.Filled.Error" Size="Size.Small"
                                             Color="@Color.Error" />
                                </ChildContent>
                                <TooltipContent>
                                    <div style="max-width: 220px; overflow-wrap: break-word;">@context.Item.ExceptionMessage</div>
                                </TooltipContent>

                            </MudTooltip>
                        }

                        @if (context.Item.JobStatus == JobStatus.NoTrigger)
                        {
                            <MudText Typo="Typo.body1">--</MudText>
                        }
                        else
                        {
                            @context.Item.PreviousTriggerTime?.LocalDateTime
                        }
                    </div>
                </CellTemplate>
            </Column>
            <Column T="ScheduleModel" Title="Actions" Groupable="false" Filterable="false" ShowColumnOptions="false"
                HeaderStyle="width: 120px;"
                Sortable="false">
                <CellTemplate>
                    <MudTooltip Duration="1000" Text="Edit">
                        <MudIconButton Icon="@Icons.Filled.Edit" 
                            Disabled="@(context.Item.JobStatus == JobStatus.NoSchedule ||
                                       context.Item.JobStatus == JobStatus.Error)"
                            OnClick="@(async () => await OnEditScheduleJob(context.Item))"
                            Size="Size.Small" aria-label="Edit"></MudIconButton>
                    </MudTooltip>

                    @if (@context.Item.JobStatus == JobStatus.Paused ||
                        @context.Item.JobStatus == JobStatus.NoTrigger)
                    {
                        <MudTooltip Duration="1000" Text="Resume Trigger">
                            <MudIconButton Icon="@Icons.Filled.PlayArrow" Size="Size.Small" 
                                Disabled="@(context.Item.JobStatus == JobStatus.NoSchedule ||
                                            context.Item.JobStatus == JobStatus.Error ||
                                            context.Item.JobStatus == JobStatus.NoTrigger)"
                                OnClick="@(async () => await OnResumeScheduleJob(context.Item))"
                                aria-label="Run"></MudIconButton>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Duration="1000" Text="Pause Trigger">
                            <MudIconButton Icon="@Icons.Filled.Pause" Size="Size.Small" 
                                Disabled="@(context.Item.JobStatus == JobStatus.NoSchedule ||
                                            context.Item.JobStatus == JobStatus.Error ||
                                            context.Item.JobStatus == JobStatus.NoTrigger)"
                                OnClick="@(async () => await OnPauseScheduleJob(context.Item))"
                                aria-label="Run"></MudIconButton>
                        </MudTooltip>
                    }

                    <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Size="Size.Small"
                        Style="display: inline-block;">
                        <MudMenuItem
                            Disabled="@(context.Item.JobStatus == JobStatus.NoSchedule ||
                                     context.Item.JobStatus == JobStatus.Error)"
                            OnClick="@(async () => await OnAddTrigger(context.Item))">
                            <div class="d-flex gap-1">
                                <MudIcon Icon="@Icons.Filled.AddAlarm" Title="Add Trigger" 
                                    Size="Size.Small" />
                                <MudText Typo="Typo.body1">Add Trigger</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem
                            Disabled="@(context.Item.JobStatus == JobStatus.NoSchedule ||
                                     context.Item.JobStatus == JobStatus.Error)"
                            OnClick="@(async () => await OnDuplicateScheduleJob(context.Item))">
                            <div class="d-flex gap-1">
                                <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Title="Clone Schedule" 
                                    Size="Size.Small" />
                                <MudText Typo="Typo.body1">Clone Schedule</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem
                            Disabled="@(context.Item.JobStatus == JobStatus.NoSchedule ||
                                     context.Item.JobStatus == JobStatus.Error)"
                            OnClick="@(() => OnJobHistory(context.Item))">
                            <div class="d-flex gap-1">
                                <MudIcon Icon="@Icons.Filled.ListAlt" Title="History" 
                                    Size="Size.Small" />
                                <MudText Typo="Typo.body1">History</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem
                            OnClick="@(async () => await OnDeleteScheduleJob(context.Item))">
                            <div class="d-flex gap-1">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Delete Schedule" 
                                    Size="Size.Small" />
                                <MudText Typo="Typo.body1">Delete Schedule</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ScheduleModel" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>
